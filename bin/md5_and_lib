#!/usr/bin/env python3

import argparse
import pandas as pd
import argparse
import os
import subprocess


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='md5_and_lib',
        description="""
Computes MD5 of fastq files and generates library template file
Author: Maxime Borry - borry@shh.mpg.de
        """
    )
    parser.add_argument(
        '-l',
        dest='layout',
        default="PAIRED",
        help='Library layout. Default = PAIRED'
    )
    parser.add_argument(
        '-i',
        dest='input_lib',
        default=None,
        help='Path to input library template file. Default = None'
    )
    parser.add_argument(
        '-o',
        dest='output',
        default=None,
        help='Path to output file. Default = <input_basename>.libraries.txt'
    )
    args = parser.parse_args()
    layout = args.layout
    lib_temp = args.input_lib
    output = args.output

    return(layout, lib_temp, output)


# Zape_23_ACACGGTT-ACCGACAA.R1.trimmed.fastq.gz

def get_basename(fname):
    filename = (fname.split("/")[-1]
                .replace(".trimmed.fastq.gz", "")
                .replace(".R1", "")
                .replace(".R2", ""))
    return(filename)


def get_md5(fname):
    try:
        md5 = subprocess.check_output(["md5", fname]).split()[-1].decode()
    except FileNotFoundError:
        md5 = subprocess.check_output(["md5sum", fname]).split()[0].decode()
    return(md5)


def get_fastq(pattern=".trimmed.fastq.gz"):
    fastq = [i for i in os.listdir() if i.endswith(pattern)]
    fq_dict = {}
    for f in fastq:
        basename = get_basename(f)
        if basename not in fq_dict.keys():
            fq_dict[basename] = [f]
        else:
            fq_dict[basename].append(f)
    for k in fq_dict:
        fq_dict[k] = sorted(fq_dict[k])
    return(fq_dict)


def prep_layout(fq_dict, layout, lib_temp, outfile):
    i = 0
    l = pd.read_csv(lib_temp, sep="\t")
    for k in fq_dict:
        if layout == "SINGLE":
            l.loc[i, "library_name"] = k
            l.loc[i, "file_name"] = fq_dict[k][0]
            l.loc[i, "file_md5"] = get_md5(fq_dict[k][0])
        else:
            l.loc[i, "library_name"] = k
            l.loc[i, "forward_file_name"] = fq_dict[k][0]
            l.loc[i, "forward_file_md5"] = get_md5(fq_dict[k][0])
            l.loc[i, "reverse_file_name"] = fq_dict[k][1]
            l.loc[i, "reverse_file_md5"] = get_md5(fq_dict[k][0])

        i += 1
    l.fillna("", inplace=True)
    l.to_csv(outfile, index=False, sep="\t")


if __name__ == "__main__":
    LAYOUT, LIB_TEMP, OUTPUT = get_args()

    fq = get_fastq()
    prep_layout(fq_dict=fq, layout=LAYOUT, lib_temp=LIB_TEMP, outfile=OUTPUT)
